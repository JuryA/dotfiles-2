# This came from Greg V's dotfiles:
#      https://github.com/myfreeweb/dotfiles
# Feel free to steal it, but attribution is nice
#
# thanks:
# http://selena.deckelmann.usesthis.com/
# https://github.com/mathiasbynens/dotfiles/blob/master/.functions
# https://superuser.com/questions/180148/how-do-you-get-screen-to-automatically-connect-to-the-current-ssh-agent-when-re

# Loading plugins, setting variables {{{

export PATH=/usr/local/bin:/usr/local/sbin:$PATH # Just in case local isn't in PATH

source $HOME/.zsh/zshuery/zshuery.sh
load_defaults
load_aliases
load_completion $HOME/.zsh/zshuery/completion/src

source $HOME/.zsh/zsh-hl/zsh-syntax-highlighting.zsh
source $HOME/.zsh/zsh-hss/zsh-history-substring-search.zsh
[[ -z $BASE16_SCHEME ]] && export BASE16_SCHEME="monokai"
export BASE16_SHELL="$HOME/.zsh/base16-shell/base16-$BASE16_SCHEME.dark.sh"
[[ -s $BASE16_SHELL ]] && source $BASE16_SHELL

export PATH=$HOME/bin:$PATH

# SSH
if [[ -S "$SSH_AUTH_SOCK" ]] && [[ ! -h "$SSH_AUTH_SOCK" ]]; then # socket and not symlink
	ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock

# Go
export GOPATH=$HOME
if [[ $HAS_BREW == 1 ]]; then
	BREWGO=$(brew --prefix go)
	[[ -d $BREWGO ]] && export GOROOT=$BREWGO/libexec && export PATH=$BREWGO/bin:$BREWGO/libexec/bin:$PATH
fi
[[ -d /usr/local/go/bin ]] && export PATH=/usr/local/go/bin:$PATH

# JS
export NODE_PATH=/usr/local/lib/node_modules
[[ -d /usr/local/share/npm/bin ]] && export PATH=/usr/local/share/npm/bin:$PATH

# Java
if [[ -e /usr/libexec/java_home ]]; then
	export JAVA_HOME=$(/usr/libexec/java_home)
	export PATH=$JAVA_HOME/bin:$PATH
fi
export ANDROID_HOME=/usr/local/opt/android-sdk
export JRUBY_OPTS="-J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1 -J-noverify"
runjava() {
	cp $1 /tmp/Main.java
	(cd /tmp && javac Main.java && echo "--- compiled, running" && java Main)
}

# Ruby
export RBXOPT=-X19
export RBENV_ROOT=/usr/local/var/rbenv
bforkify() {
	bundle config "local.$1" "$HOME/src/github.com/myfreeweb/$1"
}
bunforkify() {
	bundle config --delete "local.$1"
}

# Python
export PYTHONDONTWRITEBYTECODE=true
export VIRTUALENV_DISTRIBUTE=true
export PIP_USE_MIRRORS=true
export PYTHONSTARTUP=$HOME/.pythonrc

# OCaml
[[ -e "$(which opam)" ]] && eval "$(opam config env)"

# Emacs
[[ -d "$HOME/.cask/bin" ]] && export PATH=$HOME/.cask/bin:$PATH

# Less
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[38;5;246m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[04;33;146m'
export LESS="-R"

# Generic settings
export CLICOLOR="yes"
export EDITOR="vim"
[[ -e "$(which nvim)" ]] && export EDITOR="nvim" && alias vi="nvim"
export PAGER="less"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)
# }}}

# Custom settings, aliases and functions {{{
[[ -e $HOME/.rc ]] && source $HOME/.rc
dighost() { host $(dig $1 | grep ANSWER -C 1 | tail -n 1 | awk '{ print $5 }') }

chpwd() { update_terminal_cwd; }
precmd() {
	# $? in prompt is wrong, can't pass %? to conditionals
	if [[ $? == 0 ]]; then SMILEY=')'; else SMILEY='('; fi
	if [[ $PRIVATE == 1 ]]; then
		SCOLOR="$bg[magenta]$fg_bold[black]"
	elif [[ ${HOST##*\.} == 'local' || ${HOST##*\.} == 'localdomain' || $HOST =~ '^[^\.]+$' ]]; then
		# green on *.local, *.localdomain and hostnames without dots
		SCOLOR="$fg_bold[green]"
	else
		# red everything else - that is, on production servers!
		SCOLOR="$fg_bold[red]"
	fi
}

prj() { cd "$HOME/src/$(ghq list | peco)" }
icd() { DIR="$(ls | peco)" && cd $DIR && icd }
hst() { eval "$(history -n 1 | tail -r | peco --layout=bottom-up)" }
fuck() { sudo "$(history -n -1)" }

prompts '%{$SCOLOR%}${PWD/#$HOME/~}%{$reset_color%} %{$fg_no_bold[yellow]%}:$SMILEY%{$reset_color%} ' '%{$fg[red]%}$(ruby_version)%{$reset_color%}'
setopt auto_pushd
bindkey -e # Emacs style keys in shell
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line
bindkey '^x^e' edit-command-line
bindkey "\e[3~" delete-char # Del
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
zle -N hst
bindkey '^R' hst
# }}}

[[ -e $(which archey) ]] && archey -c
[[ -e $(which bsdinfo) ]] && bsdinfo
[[ -e $(which fortune) ]] && fortune | (cowsay -f small || cat) 2&> /dev/null | (lolcat || cat) 2&>/dev/null
[[ -e $(which keychain) ]] && eval "$(keychain --eval --agents ssh,gpg --inherit any  winterhold github bitbucket clojars heroku 0x5F9F528D3B011BAF)"
[[ -e $HOME/.zshrc.local ]] && source $HOME/.zshrc.local
[[ $PRIVATE == 1 ]] && unset HISTFILE
