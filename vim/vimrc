" Thanks:
" http://bitbucket.org/sjl/dotfiles
" https://github.com/daveray/vimfiles
" https://github.com/erynofwales/dotfiles
" https://github.com/rmurphey/dotfiles
" https://github.com/holman/dotfiles
" https://github.com/spf13/spf13-vim
" https://github.com/garybernhardt/dotfiles
" https://github.com/mutewinter/dot_vim
" https://github.com/terryma/dotfiles
" https://github.com/tpope/tpope
" https://gist.github.com/prabirshrestha/279d8b179d9353fe8694
" http://amix.dk/vim/vimrc.html

let windows = has('win32') || has('win64')
let mac = has('mac')
let g:ruby_path = [] " Disable path walking that's slow on NFS. I don't even use vim-ruby features beyond syntax

if windows
	set runtimepath+=~/.vim
end
if !has('nvim')
	set nocompatible
	set ttyfast
	set t_ti= t_te= " http://www.shallowsky.com/linux/noaltscreen.html
end

if executable('/usr/local/bin/python3.6')
	let g:python3_host_prog = '/usr/local/bin/python3.6'
elseif executable('/usr/local/bin/python3.5')
	let g:python3_host_prog = '/usr/local/bin/python3.5'
endif

" Set up virtualenv before loading jedi
if has('python3')
py3 << EOF
import os.path
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, os.path.join(project_base_dir, '/lib/python3.6/site-packages'))
    sys.path.insert(0, os.path.join(project_base_dir, '/lib/python3.5/site-packages'))
EOF
end

source ~/.vim/bundles.vim

" basics
set noswapfile backup undofile undoreload=5000 history=500
set noequalalways
set wrapscan incsearch ignorecase smartcase
set clipboard+=unnamedplus
if windows
	set clipboard=unnamed
endif
let g:GuiInternalClipboard=1
set autoread autowrite
set magic
set nojoinspaces
set modelines=3
set synmaxcol=768 " don't highlight minified js and stuff
set switchbuf=usetab
set gdefault

" formatting
set nowrap
set noexpandtab " http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent smartindent
set encoding=utf-8 nobomb
set whichwrap+=<,>,[,]
set virtualedit=block

" ui
set notimeout ttimeout ttimeoutlen=10
set relativenumber
set hlsearch
set backspace=indent,eol,start
set noerrorbells
set noshowmode
set showbreak=↪
if !windows
	set list listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,nbsp:␣
	set fillchars=diff:⣿,vert:│
end
set lazyredraw title
"set cursorline
set hidden
if windows || mac || exists('g:GuiLoaded')
	set mouse=a
end
set signcolumn=yes
set shortmess=filtIoOAc
set updatetime=300
set laststatus=2
set nostartofline
set visualbell
set showmatch
set mat=5
set virtualedit=onemore
set viewoptions=folds,options,cursor,unix,slash
set completeopt=noinsert,menuone,noselect
if has('nvim')
	set inccommand=nosplit
end
set spelllang=en_us,ru

" completion
set wildmenu wildmode=list:longest,list:full
set wildignore+=.hg,.git,.bzr,.svn " Version control
set wildignore+=*.aux,*.out,*.toc  " LaTeX
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg,*.webp,*.otf,*.ttf,*.eot,*.woff
set wildignore+=*.luac,*.pyc,*.rbc,*.class,classes,*.min.*
set wildignore+=*.annot,*.cmi,*.cmo,*.cmt,*.cmti,*.cmx,*.dep " OCaml
set wildignore+=*.o,*.so,*.dylib,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl,*.sw?
set wildignore+=.DS_Store,Thumbs.db
set wildignore+=target,node_modules,build,dist,venv
set wildignore+=.cabal-sandbox,.hpc,.stack-work,__pycache__
set wildignore+=platforms,plugins

" paths
if !windows
	if executable('zsh')
		set shell=zsh
	endif
	if executable('par')
		set formatprg=par\ -eq
	endif
	set tags=tags;/,codex.tags;/
	set dictionary=/usr/share/dict/words
	set backupskip=/tmp/*,/private/tmp/*
end
set backupdir=~/.vim/tmp/backups/
set undodir=~/.vim/tmp/undo/
set path+=** " recursive :find

" ////////////////////////////

digraph CC 8450
digraph NN 8469
digraph QQ 8474
digraph RR 8477
digraph ZZ 8484
digraph .. 8728
digraph != 8800
digraph == 8801
digraph /= 8802
digraph <= 8804
digraph >= 8805
digraph ++ 8853
digraph __ 8869

source ~/.vim/bindings.vim
source ~/.vim/autocmd.vim

" Misc
let g:netrw_banner = 0
let g:netrw_browse_split = 4
let g:netrw_liststyle = 3
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:vim_drawer_exclude_regex = "\[denite\]"

command! -bar -count=0 RFC :e http://www.ietf.org/rfc/rfc<count>.txt | setl ro noma

call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git', ''])
call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])
call denite#custom#source('prj', 'sorters', ['sorter_sublime'])
call denite#custom#var('grep', 'command', ['rg'])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])
call denite#custom#map('insert', '<C-k>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-j>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')

" Language support
let delimitMate_excluded_ft = 'clojure'
let g:sql_type_default = 'pgsql'
let g:omni_sql_no_default_maps = 1 " WTF https://www.reddit.com/r/vim/comments/2om1ib/how_to_disable_sql_dynamic_completion/
let g:bbye_previous_command = 'VimDrawerPreviousBuffer' " Integrate the buffer closing plugin with the tab-local buffers plugin. All of this should be built-in >_<
let g:haskell_indent_disable = 1 " it's bad
let g:ledger_bin='hledger'

" Colors and lines
let g:lightline = {
	    \ 'colorscheme': 'wombat',
	    \ 'active': {
	    \   'left': [ [ 'mode', 'paste' ],
	    \             [ 'readonly', 'filename', 'modified', 'cocstatus' ] ]
	    \ },
	    \ 'component': {
		\ 'readonly': '%{&readonly ? "⭤" : ""}',
	    \ },
	    \ 'component_function': {
	    \   'cocstatus': 'coc#status'
	    \ },
	\ }
let base16colorspace=256
"execute 'set background='.$BASE16_BACKGROUND
"execute 'colorscheme base16-'.$BASE16_SCHEME
colorscheme base16-ocean
hi clear SpellBad
hi SpellBad cterm=underline

if filereadable(expand("~/.vimrc.local"))
	source ~/.vimrc.local
endif
