" This came from Greg V's dotfiles:
"      https://github.com/myfreeweb/dotfiles
" Feel free to steal it, but attribution is nice
"
" Thanks:
" http://bitbucket.org/sjl/dotfiles
" https://github.com/daveray/vimfiles
" https://github.com/erynofwales/dotfiles
" https://github.com/rmurphey/dotfiles
" https://github.com/holman/dotfiles
" https://github.com/spf13/spf13-vim
" https://github.com/garybernhardt/dotfiles
" https://github.com/mutewinter/dot_vim
" https://github.com/terryma/dotfiles
" https://github.com/tpope/tpope
" https://gist.github.com/prabirshrestha/279d8b179d9353fe8694
" http://amix.dk/vim/vimrc.html

let windows = has('win32') || has('win64')
let mac = has('mac')
let g:ruby_path = [] " Disable path walking that's slow on NFS. I don't even use vim-ruby features beyond syntax

if windows
	set runtimepath+=~/.vim
end
if !has('nvim')
	set nocompatible
	set ttyfast
	set t_ti= t_te= " http://www.shallowsky.com/linux/noaltscreen.html
end

if executable('/usr/local/bin/python3.5')
	let g:python3_host_prog = '/usr/local/bin/python3.5'
endif

" Set up virtualenv before loading jedi
if has('python3')
py3 << EOF
import os.path
import sys
if 'VIRTUAL_ENV' in os.environ:
    project_base_dir = os.environ['VIRTUAL_ENV']
    sys.path.insert(0, os.path.join(project_base_dir, '/lib/python3.5/site-packages'))
EOF
end

source ~/.vim/bundles.vim

" basics
set noswapfile backup undofile undoreload=5000 history=500
set noequalalways
set wrapscan incsearch ignorecase smartcase
set clipboard+=unnamedplus
if windows
	set clipboard=unnamed
endif
set autoread autowrite
set magic
set nojoinspaces
set modelines=3
set synmaxcol=500 " don't highlight minified js and stuff
set switchbuf=usetab
set gdefault

" formatting
set nowrap
set noexpandtab " http://lea.verou.me/2012/01/why-tabs-are-clearly-superior/
set tabstop=2 shiftwidth=2 softtabstop=2
set autoindent smartindent
set encoding=utf-8 nobomb
set whichwrap+=<,>,[,]
set virtualedit=block

" ui
set notimeout ttimeout ttimeoutlen=10
set relativenumber
set hlsearch
set backspace=indent,eol,start
set noerrorbells
set noshowmode
set showbreak=↪
if !windows
	set list listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮,nbsp:␣
	set fillchars=diff:⣿,vert:│
end
set lazyredraw title
"set cursorline
set hidden
if windows || mac
	set mouse=a
end
set shortmess=filtIoOA
set laststatus=2
set nostartofline
set visualbell
set showmatch
set mat=5
set virtualedit=onemore
set viewoptions=folds,options,cursor,unix,slash
set completeopt-=preview

" completion
set wildmenu wildmode=list:longest,list:full
set wildignore+=.hg,.git,.bzr,.svn " Version control
set wildignore+=*.aux,*.out,*.toc  " LaTeX
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg,*.webp,*.otf,*.ttf,*.eot,*.woff
set wildignore+=*.luac,*.pyc,*.rbc,*.class,classes
set wildignore+=*.o,*.so,*.dylib,*.obj,*.exe,*.dll,*.manifest
set wildignore+=*.spl,*.sw?
set wildignore+=.DS_Store,Thumbs.db
set wildignore+=target,node_modules,build,dist
set wildignore+=.cabal-sandbox,.hpc,.stack-work
set wildignore+=platforms,plugins

" paths
if !windows
	if executable('zsh')
		set shell=zsh
	endif
	if executable('par')
		set formatprg=par\ -eq
	endif
	set tags=tags;/,codex.tags;/
	set dictionary=/usr/share/dict/words
	set backupskip=/tmp/*,/private/tmp/*
end
set backupdir=~/.vim/tmp/backups/
set undodir=~/.vim/tmp/undo/

" ////////////////////////////

digraph CC 8450
digraph NN 8469
digraph QQ 8474
digraph RR 8477
digraph ZZ 8484
digraph .. 8728
digraph != 8800
digraph == 8801
digraph /= 8802
digraph <= 8804
digraph >= 8805
digraph ++ 8853
digraph __ 8869

source ~/.vim/bindings.vim
source ~/.vim/autocmd.vim
source ~/.vim/fuzzy.vim

" Misc
let g:SuperTabDefaultCompletionType = '<c-x><c-o>'
let g:startify_change_to_dir = 0

let delimitMate_excluded_ft='clojure'
let g:jedi#popup_on_dot = 0
let g:ledger_bin='hledger'
let g:FactorRoot='/Applications/factor'
let g:racer_cmd=$HOME.'/src/github.com/phildawes/racer/target/release/racer'

if exists('/usr/local/llvm38/lib') " FreeBSD
	let g:clang_library_path = '/usr/local/llvm38/lib'
elseif exists('/usr/local/llvm37/lib')
	let g:clang_library_path = '/usr/local/llvm37/lib'
elseif exists('/usr/local/llvm36/lib')
	let g:clang_library_path = '/usr/local/llvm36/lib'
elseif exists('/usr/local/llvm35/lib')
	let g:clang_library_path = '/usr/local/llvm35/lib'
elseif exists('/usr/local/opt/llvm38/lib/llvm-3.8/lib') " Homebrew
	let g:clang_library_path = '/usr/local/opt/llvm38/lib/llvm-3.8/lib'
elseif exists('/usr/local/opt/llvm37/lib/llvm-3.7/lib')
	let g:clang_library_path = '/usr/local/opt/llvm37/lib/llvm-3.7/lib'
elseif exists('/usr/local/opt/llvm36/lib/llvm-3.6/lib')
	let g:clang_library_path = '/usr/local/opt/llvm36/lib/llvm-3.6/lib'
elseif exists('/usr/local/opt/llvm35/lib/llvm-3.5/lib')
	let g:clang_library_path = '/usr/local/opt/llvm35/lib/llvm-3.5/lib'
elseif exists('/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib') " Xcode
	let g:clang_library_path = '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib'
elseif exists('/Library/Developer/CommandLineTools/usr/lib')
	let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib'
endif


command! -bar -count=0 RFC :e http://www.ietf.org/rfc/rfc<count>.txt | setl ro noma

" Colors and lines
let g:lightline = {
			\ 'colorscheme': 'solarized',
			\ 'component': {
			\   'readonly': '%{&readonly ? "⭤" : ""}',
			\ }
			\ }
let base16colorspace=256
execute 'set background='.$BASE16_BACKGROUND
"execute 'colorscheme base16-'.$BASE16_SCHEME
colorscheme base16-ocean
" note: base16-*what* doesn't actually matter for the 256 color terminal

if filereadable(expand("~/.vimrc.local"))
	source ~/.vimrc.local
endif
